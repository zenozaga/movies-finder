import Requester from "../models/requester";
import { SerieType } from "../models/serie";
import { MovieType } from '../models/movie';
import Episode, { EpisodeType } from "../models/episode";
import Category from "../models/category";
import Cast from "../models/cast";
import { SeasonType } from "../models/season";
export type HomeType = {
    episodes: Episode[];
    movies: MovieType[];
    series: SerieType[];
    topMovies?: MovieType[];
    topSeries?: SerieType[];
};
export interface DefaultProviderType {
    name: string;
    language: string;
    site: string;
    get requester(): Requester | undefined;
    headers(extra?: any): {} | undefined;
    setSite(site: string): void;
    setRequester(requester: Requester): void;
    match(urlOrID: string): boolean;
    byType(type?: string, options?: {}): Promise<Array<MovieType | SerieType | EpisodeType>>;
    bytType<T>(type?: string, options?: {}): Promise<Array<T>>;
    search(query: string, options?: {}): Promise<Array<MovieType | SerieType | EpisodeType>>;
    getById(id: string, type?: string): Promise<MovieType | SerieType | EpisodeType>;
    top(): Promise<Array<MovieType | SerieType | EpisodeType>>;
    topMovies(): Promise<Array<MovieType>>;
    topSeries(): Promise<Array<SerieType>>;
    home(): Promise<HomeType>;
    movies(options?: {}): Promise<Array<MovieType>>;
    movie(id: string, options?: any): Promise<MovieType>;
    series(options?: {}): Promise<Array<SerieType>>;
    serie(id: string, options?: any): Promise<SerieType>;
    seasons(serieID?: string): Promise<Array<SeasonType>>;
    season(id: string, serieID?: string): Promise<SeasonType>;
    episodes(seasonID?: string, serieID?: string): Promise<Array<EpisodeType>>;
    episode(id: string, seasonID?: string, serieID?: string): Promise<EpisodeType>;
    genders(): Promise<Array<Category>>;
    cast(): Promise<Array<Cast>>;
}
declare class DefaultProvider implements DefaultProviderType {
    name: string;
    language: string;
    site: string;
    private _requester?;
    get requester(): Requester;
    setRequester(requester: Requester): void;
    headers(extra?: any): {} | undefined;
    setSite(site: string): void;
    match(urlOrID: string): boolean;
    byType(type?: string | undefined, options?: {} | undefined): Promise<(MovieType | SerieType | EpisodeType)[]>;
    bytType<T>(type?: string | undefined, options?: {} | undefined): Promise<T[]>;
    search(query: string, options?: {} | undefined): Promise<(MovieType | SerieType | EpisodeType)[]>;
    getById(id: string, type?: string | undefined): Promise<MovieType | SerieType | EpisodeType>;
    top(): Promise<(MovieType | SerieType | EpisodeType)[]>;
    topMovies(): Promise<MovieType[]>;
    topSeries(): Promise<SerieType[]>;
    home(): Promise<HomeType>;
    movies(options?: {} | undefined): Promise<MovieType[]>;
    movie(id: string, options?: any): Promise<MovieType>;
    series(options?: {} | undefined): Promise<SerieType[]>;
    serie(id: string, options?: any): Promise<SerieType>;
    seasons(serieID?: string | undefined, options?: any): Promise<SeasonType[]>;
    season(id: string, serieID?: string | undefined, options?: any): Promise<SeasonType>;
    episodes(seasonID?: string | undefined, serieID?: string | undefined, options?: any): Promise<EpisodeType[]>;
    episode(id: string, seasonID?: string | undefined, serieID?: string | undefined, options?: any): Promise<EpisodeType>;
    genders(options?: any): Promise<Category[]>;
    cast(options?: any): Promise<Cast[]>;
}
export default DefaultProvider;
